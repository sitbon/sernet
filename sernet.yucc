/* -*- c -*- */
#if !defined INCLUDED_yuck_h_
#define INCLUDED_yuck_h_

#include <stddef.h>

#define YUCK_OPTARG_NONE	((void*)0x1U)

enum yuck_cmds_e {
	/* value used when no command was specified */
	SERNET_CMD_NONE = 0U,

	/* actual commands */
	SERNET_CMD_FWD,
	SERNET_CMD_DST,
	SERNET_CMD_SRC,
	SERNET_CMD_DMP,
	SERNET_CMD_OSC,
	
	/* convenience identifiers */
	YUCK_NOCMD = SERNET_CMD_NONE,
	YUCK_NCMDS = SERNET_CMD_OSC
};



typedef union yuck_u yuck_t;


/* convenience structure for `fwd' */
struct yuck_cmd_fwd_s {
	enum yuck_cmds_e cmd;

	/* left-over arguments, the command string is never a part of this */
	size_t nargs;
	char **args;

	/* help is handled automatically */
	/* version is handled automatically */
	char *rate_arg;
	char *port_arg;
	unsigned int verbose_flag;

	char *input_arg;
	char *host_arg;
	unsigned int broadcast_flag;
};

/* convenience structure for `dst' */
struct yuck_cmd_dst_s {
	enum yuck_cmds_e cmd;

	/* left-over arguments, the command string is never a part of this */
	size_t nargs;
	char **args;

	/* help is handled automatically */
	/* version is handled automatically */
	char *rate_arg;
	char *port_arg;
	unsigned int verbose_flag;

	char *sock_arg;
};

/* convenience structure for `src' */
struct yuck_cmd_src_s {
	enum yuck_cmds_e cmd;

	/* left-over arguments, the command string is never a part of this */
	size_t nargs;
	char **args;

	/* help is handled automatically */
	/* version is handled automatically */
	char *rate_arg;
	char *port_arg;
	unsigned int verbose_flag;

	char *output_arg;
	char *size_arg;
	char *delay_arg;
	char *listen_arg;
};

/* convenience structure for `dmp' */
struct yuck_cmd_dmp_s {
	enum yuck_cmds_e cmd;

	/* left-over arguments, the command string is never a part of this */
	size_t nargs;
	char **args;

	/* help is handled automatically */
	/* version is handled automatically */
	char *rate_arg;
	char *port_arg;
	unsigned int verbose_flag;

	char *sock_arg;
};

/* convenience structure for `osc' */
struct yuck_cmd_osc_s {
	enum yuck_cmds_e cmd;

	/* left-over arguments, the command string is never a part of this */
	size_t nargs;
	char **args;

	/* help is handled automatically */
	/* version is handled automatically */
	char *rate_arg;
	char *port_arg;
	unsigned int verbose_flag;

	char *sock_arg;
	char *host_arg;
};


union yuck_u {
	/* generic struct */
	struct {
		enum yuck_cmds_e cmd;

		/* left-over arguments,
		 * the command string is never a part of this */
		size_t nargs;
		char **args;

		/* slots common to all commands */
		/* help is handled automatically */
		/* version is handled automatically */
		char *rate_arg;
		char *port_arg;
		unsigned int verbose_flag;
	};

	/* depending on CMD at most one of the following structs is filled in
	 * if CMD is YUCK_NONE no slots of this union must be accessed */
	struct yuck_cmd_fwd_s fwd;
	struct yuck_cmd_dst_s dst;
	struct yuck_cmd_src_s src;
	struct yuck_cmd_dmp_s dmp;
	struct yuck_cmd_osc_s osc;
};


static __attribute__((nonnull(1))) int
yuck_parse(yuck_t*, int argc, char *argv[]);
static __attribute__((nonnull(1))) void yuck_free(yuck_t*);

static __attribute__((nonnull(1))) void yuck_auto_help(const yuck_t*);
static __attribute__((nonnull(1))) void yuck_auto_usage(const yuck_t*);
static __attribute__((nonnull(1))) void yuck_auto_version(const yuck_t*);

/* some hooks */
#if defined yuck_post_help
static __attribute__((nonnull(1))) void yuck_post_help(const yuck_t*);
#endif	/* yuck_post_help */

#if defined yuck_post_usage
static __attribute__((nonnull(1))) void yuck_post_usage(const yuck_t*);
#endif	/* yuck_post_usage */

#if defined yuck_post_version
static __attribute__((nonnull(1))) void yuck_post_version(const yuck_t*);
#endif	/* yuck_post_version */

#endif	/* INCLUDED_yuck_h_ */
/* -*- c -*- */
#if defined HAVE_CONFIG_H
# include "config.h"
#endif	/* HAVE_CONFIG_H */
#if defined HAVE_VERSION_H
# include "version.h"
#endif	/* HAVE_VERSION_H */
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <stdio.h>
#include <limits.h>

#if defined __INTEL_COMPILER
# pragma warning (disable:177)
# pragma warning (disable:111)
#elif defined __GNUC__
# if __GNUC__ > 4 || __GNUC__ == 4 &&  __GNUC_MINOR__ >= 6
#  pragma GCC diagnostic push
# endif	 /* GCC version */
# pragma GCC diagnostic ignored "-Wunused-label"
# pragma GCC diagnostic ignored "-Wunused-variable"
# pragma GCC diagnostic ignored "-Wunused-function"
#endif	/* __INTEL_COMPILER */


static inline bool
yuck_streqp(const char *s1, const char *s2)
{
	return !strcmp(s1, s2);
}

/* for multi-args */
static inline char**
yuck_append(char **array, size_t n, char *val)
{
	if (!(n % 16U)) {
		/* resize */
		array = realloc(array, (n + 16U) * sizeof(*array));
		if (array == NULL) {
			return NULL;
		}
	}
	array[n] = val;
	return array;
}

static enum yuck_cmds_e yuck_parse_cmd(const char *cmd)
{
	if (0) {
		;
	} else if (yuck_streqp(cmd, "fwd")) {
		return SERNET_CMD_FWD;
	} else if (yuck_streqp(cmd, "dst")) {
		return SERNET_CMD_DST;
	} else if (yuck_streqp(cmd, "src")) {
		return SERNET_CMD_SRC;
	} else if (yuck_streqp(cmd, "dmp")) {
		return SERNET_CMD_DMP;
	} else if (yuck_streqp(cmd, "osc")) {
		return SERNET_CMD_OSC;
	} else {
		/* error here? */
		fprintf(stderr, "sernet: invalid command `%s'\n\
Try `--help' for a list of commands.\n", cmd);
	}
	return (enum yuck_cmds_e)-1;
}


static int yuck_parse(yuck_t tgt[static 1U], int argc, char *argv[])
{
	char *op;
	int i;

	/* we'll have at most this many args */
	memset(tgt, 0, sizeof(*tgt));
	if ((tgt->args = calloc(argc, sizeof(*tgt->args))) == NULL) {
		return -1;
	}
	for (i = 1; i < argc && tgt->nargs < (size_t)-1; i++) {
		op = argv[i];

		switch (*op) {
		case '-':
			/* could be an option */
			switch (*++op) {
			default:
				/* could be glued into one */
				for (; *op; op++) {
					goto shortopt; back_from_shortopt:;
				}
				break;
			case '-':
				if (*++op == '\0') {
					i++;
					goto dashdash; back_from_dashdash:;
					break;
				}
				goto longopt; back_from_longopt:;
				break;
			case '\0':
				goto plain_dash;
			}
			break;
		default:
		plain_dash:
			goto arg; back_from_arg:;
			break;
		}
	}
	if (i < argc) {
		op = argv[i];

		if (*op++ == '-' && *op++ == '-' && !*op) {
			/* another dashdash, filter out */
			i++;
		}
	}
	/* has to be here as the max_pargs condition might drive us here */
	dashdash:
	{
		/* dashdash loop, pile everything on tgt->args
		 * don't check for subcommands either, this is in accordance to
		 * the git tool which won't accept commands after -- */
		for (; i < argc; i++) {
			tgt->args[tgt->nargs++] = argv[i];
		}
	}
	return 0;

	longopt:
	{
		/* split into option and arg part */
		char *arg;

		if ((arg = strchr(op, '=')) != NULL) {
			/* \nul this one out */
			*arg++ = '\0';
		}

		switch (tgt->cmd) {
		default:
			goto SERNET_CMD_NONE_longopt; back_from_SERNET_CMD_NONE_longopt:;
			break;
		case SERNET_CMD_FWD:
			goto SERNET_CMD_FWD_longopt; back_from_SERNET_CMD_FWD_longopt:;
			break;
		case SERNET_CMD_DST:
			goto SERNET_CMD_DST_longopt; back_from_SERNET_CMD_DST_longopt:;
			break;
		case SERNET_CMD_SRC:
			goto SERNET_CMD_SRC_longopt; back_from_SERNET_CMD_SRC_longopt:;
			break;
		case SERNET_CMD_DMP:
			goto SERNET_CMD_DMP_longopt; back_from_SERNET_CMD_DMP_longopt:;
			break;
		case SERNET_CMD_OSC:
			goto SERNET_CMD_OSC_longopt; back_from_SERNET_CMD_OSC_longopt:;
			break;
		}
		goto back_from_longopt;


		SERNET_CMD_NONE_longopt:
		{
			if (0) {
				;
			} else if (yuck_streqp(op, "help")) {
				/* invoke auto action and exit */
				yuck_auto_help(tgt);
				goto success;
			} else if (yuck_streqp(op, "version")) {
				/* invoke auto action and exit */
				yuck_auto_version(tgt);
				goto success;
			} else if (yuck_streqp(op, "rate")) {
				tgt->rate_arg = arg ?: argv[++i];
			} else if (yuck_streqp(op, "port")) {
				tgt->port_arg = arg ?: argv[++i];
			} else if (yuck_streqp(op, "verbose")) {
				tgt->verbose_flag++;
			} else {
				/* grml */
				fprintf(stderr, "sernet: unrecognized option `--%s'\n", op);
				goto failure;
			}
			goto back_from_SERNET_CMD_NONE_longopt;
		}
		SERNET_CMD_FWD_longopt:
		{
			if (0) {
				;
			} else if (yuck_streqp(op, "input")) {
				tgt->fwd.input_arg = arg ?: argv[++i];
			} else if (yuck_streqp(op, "host")) {
				tgt->fwd.host_arg = arg ?: argv[++i];
			} else if (yuck_streqp(op, "broadcast")) {
				tgt->fwd.broadcast_flag++;
			} else {
				goto SERNET_CMD_NONE_longopt;
			}
			goto back_from_SERNET_CMD_FWD_longopt;
		}
		SERNET_CMD_DST_longopt:
		{
			if (0) {
				;
			} else if (yuck_streqp(op, "sock")) {
				tgt->dst.sock_arg = arg ?: argv[++i];
			} else {
				goto SERNET_CMD_NONE_longopt;
			}
			goto back_from_SERNET_CMD_DST_longopt;
		}
		SERNET_CMD_SRC_longopt:
		{
			if (0) {
				;
			} else if (yuck_streqp(op, "output")) {
				tgt->src.output_arg = arg ?: argv[++i];
			} else if (yuck_streqp(op, "size")) {
				tgt->src.size_arg = arg ?: argv[++i];
			} else if (yuck_streqp(op, "delay")) {
				tgt->src.delay_arg = arg ?: argv[++i];
			} else if (yuck_streqp(op, "listen")) {
				tgt->src.listen_arg = arg ?: argv[++i];
			} else {
				goto SERNET_CMD_NONE_longopt;
			}
			goto back_from_SERNET_CMD_SRC_longopt;
		}
		SERNET_CMD_DMP_longopt:
		{
			if (0) {
				;
			} else if (yuck_streqp(op, "sock")) {
				tgt->dmp.sock_arg = arg ?: argv[++i];
			} else {
				goto SERNET_CMD_NONE_longopt;
			}
			goto back_from_SERNET_CMD_DMP_longopt;
		}
		SERNET_CMD_OSC_longopt:
		{
			if (0) {
				;
			} else if (yuck_streqp(op, "sock")) {
				tgt->osc.sock_arg = arg ?: argv[++i];
			} else if (yuck_streqp(op, "host")) {
				tgt->osc.host_arg = arg ?: argv[++i];
			} else {
				goto SERNET_CMD_NONE_longopt;
			}
			goto back_from_SERNET_CMD_OSC_longopt;
		}
		
	}

	shortopt:
	{
		char *arg = op + 1U;

		switch (tgt->cmd) {
		default:
			goto SERNET_CMD_NONE_shortopt; back_from_SERNET_CMD_NONE_shortopt:;
			break;
		case SERNET_CMD_FWD:
			goto SERNET_CMD_FWD_shortopt; back_from_SERNET_CMD_FWD_shortopt:;
			break;
		case SERNET_CMD_DST:
			goto SERNET_CMD_DST_shortopt; back_from_SERNET_CMD_DST_shortopt:;
			break;
		case SERNET_CMD_SRC:
			goto SERNET_CMD_SRC_shortopt; back_from_SERNET_CMD_SRC_shortopt:;
			break;
		case SERNET_CMD_DMP:
			goto SERNET_CMD_DMP_shortopt; back_from_SERNET_CMD_DMP_shortopt:;
			break;
		case SERNET_CMD_OSC:
			goto SERNET_CMD_OSC_shortopt; back_from_SERNET_CMD_OSC_shortopt:;
			break;
		}
		goto back_from_shortopt;


		SERNET_CMD_NONE_shortopt:
		{
			switch (*op) {
			default:
				;
				;
				fprintf(stderr, "sernet: invalid option -%c\n", *op);
				goto failure;


			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				/* literal treatment of numeral */
				goto arg;

				
			case '?':
				/* invoke auto action and exit */
				yuck_auto_help(tgt);
				goto success;
				break;
			case 'V':
				/* invoke auto action and exit */
				yuck_auto_version(tgt);
				goto success;
				break;
			case 'r':
				tgt->rate_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			case 'p':
				tgt->port_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			case 'v':
				tgt->verbose_flag++;
				break;
			}
			goto back_from_SERNET_CMD_NONE_shortopt;
		}
		SERNET_CMD_FWD_shortopt:
		{
			switch (*op) {
			default:
				;
				;
				goto SERNET_CMD_NONE_shortopt;

				
			case 'i':
				tgt->fwd.input_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			case 'h':
				tgt->fwd.host_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			case 'b':
				tgt->fwd.broadcast_flag++;
				break;
			}
			goto back_from_SERNET_CMD_FWD_shortopt;
		}
		SERNET_CMD_DST_shortopt:
		{
			switch (*op) {
			default:
				;
				;
				goto SERNET_CMD_NONE_shortopt;

				
			case 'S':
				tgt->dst.sock_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			}
			goto back_from_SERNET_CMD_DST_shortopt;
		}
		SERNET_CMD_SRC_shortopt:
		{
			switch (*op) {
			default:
				;
				;
				goto SERNET_CMD_NONE_shortopt;

				
			case 'o':
				tgt->src.output_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			case 's':
				tgt->src.size_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			case 'd':
				tgt->src.delay_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			case 'l':
				tgt->src.listen_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			}
			goto back_from_SERNET_CMD_SRC_shortopt;
		}
		SERNET_CMD_DMP_shortopt:
		{
			switch (*op) {
			default:
				;
				;
				goto SERNET_CMD_NONE_shortopt;

				
			case 'S':
				tgt->dmp.sock_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			}
			goto back_from_SERNET_CMD_DMP_shortopt;
		}
		SERNET_CMD_OSC_shortopt:
		{
			switch (*op) {
			default:
				;
				;
				goto SERNET_CMD_NONE_shortopt;

				
			case 'S':
				tgt->osc.sock_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			case 'h':
				tgt->osc.host_arg = *arg
					? (op += strlen(arg), arg)
					: argv[++i];
				break;
			}
			goto back_from_SERNET_CMD_OSC_shortopt;
		}
		
	}

	arg:
	{
		if (tgt->cmd || !YUCK_NCMDS) {
			tgt->args[tgt->nargs++] = argv[i];
		} else {
			/* ah, might be an arg then */
			if ((tgt->cmd = yuck_parse_cmd(op)) > YUCK_NCMDS) {
				return -1;
			}
		}
		goto back_from_arg;
	}

	failure:
	{
		exit(EXIT_FAILURE);
	}

	success:
	{
		exit(EXIT_SUCCESS);
	}
}

static void yuck_free(yuck_t tgt[static 1U])
{
	if (tgt->args != NULL) {
		/* free despite const qualifier */
		free(tgt->args);
	}
	/* free mulargs */
	switch (tgt->cmd) {
		void *ptr;
	default:
		break;
	case SERNET_CMD_NONE:
;
;
;
;
;
		break;
	case SERNET_CMD_FWD:
;
;
;
		break;
	case SERNET_CMD_DST:
;
		break;
	case SERNET_CMD_SRC:
;
;
;
;
		break;
	case SERNET_CMD_DMP:
;
		break;
	case SERNET_CMD_OSC:
;
;
		break;
		break;
	}
	return;
}

static void yuck_auto_usage(const yuck_t src[static 1U])
{
	switch (src->cmd) {
	default:
	YUCK_NOCMD:
		puts("Usage: sernet [OPTION]... COMMAND\n\
");
		break;

	case SERNET_CMD_FWD:
		puts("Usage: sernet fwd [OPTION]...\n\
\n\
Forward from serial port to network.\n\
");
		break;

	case SERNET_CMD_DST:
		puts("Usage: sernet dst [OPTION]...\n\
\n\
Collect packets from network, filter, and send over unix socket.\n\
");
		break;

	case SERNET_CMD_SRC:
		puts("Usage: sernet src [OPTION]...\n\
\n\
Send packets on serial port and time network response.\n\
");
		break;

	case SERNET_CMD_DMP:
		puts("Usage: sernet dmp [OPTION]...\n\
\n\
Dump packets from unix socket.\n\
");
		break;

	case SERNET_CMD_OSC:
		puts("Usage: sernet osc [OPTION]...\n\
\n\
Pass packets from unix socket to osc.\n\
");
		break;

	}

#if defined yuck_post_usage
	yuck_post_usage(src);
#endif	/* yuck_post_usage */
	return;
}

static void yuck_auto_help(const yuck_t src[static 1U])
{
	yuck_auto_usage(src);

	if (src->cmd == YUCK_NOCMD) {
		/* also output a list of commands */
		puts("COMMAND may be one of:\n\
  fwd         Forward from serial port to network.\n\
  dst         Collect packets from network, filter, and send over unix socket.\n\
  src         Send packets on serial port and time network response.\n\
  dmp         Dump packets from unix socket.\n\
  osc         Pass packets from unix socket to osc.\n\
");
	}

	/* leave a not about common options */
	if (src->cmd == YUCK_NOCMD) {
		puts("\
Options accepted by all commands:");
	} else {
		puts("\
Common options:\n\
  -?, --help            display this help and exit\n\
  -V, --version         output version information and exit\n\
  -r, --rate=RATE       Serial baud rate.\n\
  -p, --port=PORT       Connect or listen on port PORT.\n\
  -v, --verbose         Print extra info.\n\
");
	}

	switch (src->cmd) {
	default:
	case SERNET_CMD_NONE:
		puts("\
  -?, --help            display this help and exit\n\
  -V, --version         output version information and exit\n\
  -r, --rate=RATE       Serial baud rate.\n\
  -p, --port=PORT       Connect or listen on port PORT.\n\
  -v, --verbose         Print extra info.\n\
");
		break;

	case SERNET_CMD_FWD:
		puts("\
Command-specific options:\n\
  -i, --input=FILE      Input serial device file.\n\
  -h, --host=HOST       Remote host to forward to.\n\
  -b, --broadcast       Enable USP broadcast.\n\
");
		break;

	case SERNET_CMD_DST:
		puts("\
Command-specific options:\n\
  -S, --sock=SOCKET     UNIX socket name.\n\
");
		break;

	case SERNET_CMD_SRC:
		puts("\
Command-specific options:\n\
  -o, --output=FILE     Serial device file to write into.\n\
  -s, --size=SIZE       Packet size per write.\n\
  -d, --delay=MSEC      Delay between packets.\n\
  -l, --listen=IFACE    Listen on interface IFACE.\n\
");
		break;

	case SERNET_CMD_DMP:
		puts("\
Command-specific options:\n\
  -S, --sock=SOCKET     UNIX socket name.\n\
");
		break;

	case SERNET_CMD_OSC:
		puts("\
Command-specific options:\n\
  -S, --sock=SOCKET     UNIX socket name.\n\
  -h, --host=HOST       Remote host to forward to.\n\
");
		break;

	}

#if defined yuck_post_help
	yuck_post_help(src);
#endif	/* yuck_post_help */

#if defined PACKAGE_BUGREPORT
	puts("\n\
Report bugs to " PACKAGE_BUGREPORT);
#endif	/* PACKAGE_BUGREPORT */
	return;
}

static void yuck_auto_version(const yuck_t src[static 1U])
{
	switch (src->cmd) {
	default:
#if 0

#elif defined package_string
		puts(package_string);
#elif defined package_version
		printf("sernet %s\n", package_version);
#elif defined PACKAGE_STRING
		puts(PACKAGE_STRING);
#elif defined PACKAGE_VERSION
		puts("sernet " PACKAGE_VERSION);
#elif defined VERSION
		puts("sernet " VERSION);
#else  /* !PACKAGE_VERSION, !VERSION */
		puts("sernet unknown version");
#endif	/* PACKAGE_VERSION */
		break;
	}

#if defined yuck_post_version
	yuck_post_version(src);
#endif	/* yuck_post_version */
	return;
}

#if defined __INTEL_COMPILER
# pragma warning (default:177)
# pragma warning (default:111)
#elif defined __GNUC__
# if __GNUC__ > 4 || __GNUC__ == 4 &&  __GNUC_MINOR__ >= 6
#  pragma GCC diagnostic pop
# endif	 /* GCC version */
#endif	/* __INTEL_COMPILER */
